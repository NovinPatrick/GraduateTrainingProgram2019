mysql> select * from likes;
+------+------+
| ID1  | ID2  |
+------+------+
| 1689 | 1709 |
| 1709 | 1689 |
| 1782 | 1709 |
| 1911 | 1247 |
| 1247 | 1468 |
| 1641 | 1468 |
| 1316 | 1304 |
| 1501 | 1934 |
| 1934 | 1501 |
| 1025 | 1101 |
+------+------+
10 rows in set (0.00 sec)


mysql> select * from friend;
+------+------+
| ID1  | ID2  |
+------+------+
| 1510 | 1381 |
| 1510 | 1689 |
| 1689 | 1709 |
| 1381 | 1247 |
| 1709 | 1247 |
| 1689 | 1782 |
| 1782 | 1468 |
| 1782 | 1316 |
| 1782 | 1304 |
| 1468 | 1101 |
| 1468 | 1641 |
| 1101 | 1641 |
| 1247 | 1911 |
| 1247 | 1501 |
| 1911 | 1501 |
| 1501 | 1934 |
| 1316 | 1934 |
| 1934 | 1304 |
| 1304 | 1661 |
| 1661 | 1025 |
| 1381 | 1510 |
| 1689 | 1510 |
| 1709 | 1689 |
| 1247 | 1381 |
| 1247 | 1709 |
| 1782 | 1689 |
| 1468 | 1782 |
| 1316 | 1782 |
| 1304 | 1782 |
| 1101 | 1468 |
| 1641 | 1468 |
| 1641 | 1101 |
| 1911 | 1247 |
| 1501 | 1247 |
| 1501 | 1911 |
| 1934 | 1501 |
| 1934 | 1316 |
| 1304 | 1934 |
| 1661 | 1304 |
| 1025 | 1661 |
+------+------+
40 rows in set (0.00 sec)


mysql> select * from highschooler;
+------+-----------+-------+
| ID   | name      | grade |
+------+-----------+-------+
| 1510 | Jordan    |     9 |
| 1689 | Gabriel   |     9 |
| 1381 | Tiffany   |     9 |
| 1709 | Cassandra |     9 |
| 1101 | Haley     |    10 |
| 1782 | Andrew    |    10 |
| 1468 | Kris      |    10 |
| 1641 | Brittany  |    10 |
| 1247 | Alexis    |    11 |
| 1316 | Austin    |    11 |
| 1911 | Gabriel   |    11 |
| 1501 | Jessica   |    11 |
| 1304 | Jordan    |    12 |
| 1025 | John      |    12 |
| 1934 | Kyle      |    12 |
| 1661 | Logan     |    12 |
+------+-----------+-------+
16 rows in set (0.00 sec)


---------------------------------------------------------------------------

1. Find the names of all students who are friends with someone named Gabriel.
=>mysql> select h1.name from friend join highschooler h1 on friend.id1=h1.id join highschooler h2 on friend.id2=h2.id where h2.name='Gabriel';
+-----------+
| name      |
+-----------+
| Jordan    |
| Alexis    |
| Cassandra |
| Andrew    |
| Jessica   |
+-----------+
5 rows in set (0.00 sec)

2. For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like
=>mysql> select h1.name,h1.grade,h2.name,h2.grade from highschooler h1 join likes l on l.id1=h1.id join highschooler h2 on h2.id=l.id2 where (h1.grade-h2.grade)>=2;
+------+-------+-------+-------+
| name | grade | name  | grade |
+------+-------+-------+-------+
| John |    12 | Haley |    10 |
+------+-------+-------+-------+
1 row in set (0.05 sec)


3. for every pair of students who both like each other, return the name and grade of both students. 
Include each pair only once, with the two names in alphabetical order. 
=>mysql> select h1.name,h1.grade,h2.name,h2.grade from highschooler h1,highschooler h2,likes l1,likes l2 where (h1.id=l1.id1 and h2.id=l1.id2) and (h1.id=l2.id2 and h2.id=l2.id1) and h1.name < h2.name order by h1.name,h2.name;
+-----------+-------+---------+-------+
| name      | grade | name    | grade |
+-----------+-------+---------+-------+
| Cassandra |     9 | Gabriel |     9 |
| Jessica   |    11 | Kyle    |    12 |
+-----------+-------+---------+-------+
2 rows in set (0.02 sec)


4. Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade.
=>mysql> select name,grade from highschooler where id not in (select distinct id1 from likes union select distinct id2 from likes) order by grade,name;
+---------+-------+
| name    | grade |
+---------+-------+
| Jordan  |     9 |
| Tiffany |     9 |
| Logan   |    12 |
+---------+-------+
3 rows in set (0.00 sec)

mysql> select name,grade from highschooler left join (select distinct id1 from likes union select distinct id2 from likes) high on high.id1=highschooler.id where high.id1 is null  order by grade,name;
+---------+-------+
| name    | grade |
+---------+-------+
| Jordan  |     9 |
| Tiffany |     9 |
| Logan   |    12 |
+---------+-------+
3 rows in set (0.02 sec)


5. For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades.
=>mysql> select h.name,h.grade from likes l1 right join likes l2 on l1.id1=l2.id2 join highschooler h on h.id=l2.id2 where l1.id1 is null and l1.id2 is null;
+--------+-------+
| name   | grade |
+--------+-------+
| Haley  |    10 |
| Kris   |    10 |
| Kris   |    10 |
| Jordan |    12 |
+--------+-------+
4 rows in set (0.00 sec)


6. Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade.
=>mysql> select h1.name,h1.grade,h2.name,h2.grade from friend f1 join highschooler h1 on f1.id1=h1.id join highschooler h2 on f1.id2=h2.id where h1.grade=h2.grade order by h1.grade,h1.name;
+-----------+-------+-----------+-------+
| name      | grade | name      | grade |
+-----------+-------+-----------+-------+
| Cassandra |     9 | Gabriel   |     9 |
| Gabriel   |     9 | Cassandra |     9 |
| Gabriel   |     9 | Jordan    |     9 |
| Jordan    |     9 | Tiffany   |     9 |
| Jordan    |     9 | Gabriel   |     9 |
| Tiffany   |     9 | Jordan    |     9 |
| Andrew    |    10 | Kris      |    10 |
| Brittany  |    10 | Kris      |    10 |
| Brittany  |    10 | Haley     |    10 |
| Haley     |    10 | Brittany  |    10 |
| Haley     |    10 | Kris      |    10 |
| Kris      |    10 | Haley     |    10 |
| Kris      |    10 | Brittany  |    10 |
| Kris      |    10 | Andrew    |    10 |
| Alexis    |    11 | Gabriel   |    11 |
| Alexis    |    11 | Jessica   |    11 |
| Gabriel   |    11 | Jessica   |    11 |
| Gabriel   |    11 | Alexis    |    11 |
| Jessica   |    11 | Alexis    |    11 |
| Jessica   |    11 | Gabriel   |    11 |
| John      |    12 | Logan     |    12 |
| Jordan    |    12 | Logan     |    12 |
| Jordan    |    12 | Kyle      |    12 |
| Kyle      |    12 | Jordan    |    12 |
| Logan     |    12 | John      |    12 |
| Logan     |    12 | Jordan    |    12 |
+-----------+-------+-----------+-------+
26 rows in set (0.00 sec)

