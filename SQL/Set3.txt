
mysql> select * from movie;
+-----+-------------------------+------+------------------+
| Mid | title                   | year | director         |
+-----+-------------------------+------+------------------+
| 101 | Gone with the Wind      | 1939 | Victor Fleming   |
| 102 | Star Wars               | 1977 | George Lucas     |
| 103 | The Sound of Music      | 1965 | Robert Wise      |
| 104 | E.T.                    | 1982 | Steven Spielberg |
| 105 | Titanic                 | 1997 | James Cameron    |
| 106 | Snow White              | 1937 | NULL             |
| 107 | Avatar                  | 2009 | James Cameron    |
| 108 | Raiders of the Lost Ark | 1981 | Steven Spielberg |
+-----+-------------------------+------+------------------+
8 rows in set (0.00 sec)


mysql> select * from reviewer;
+-----+------------------+
| rid | name             |
+-----+------------------+
| 201 | Sarah Martinez   |
| 202 | Daniel Lewis     |
| 203 | Brittany Harris  |
| 204 | Mike Anderson    |
| 205 | Chris Jackson    |
| 206 | Elizabeth Thomas |
| 207 | James Cameron    |
| 208 | Ashley White     |
+-----+------------------+
8 rows in set (0.00 sec)


mysql> select * from rating;
+--------+--------+-------+------------+
| rid_fk | mid_fk | stars | rating     |
+--------+--------+-------+------------+
|    201 |    101 |     2 | 2011-01-22 |
|    201 |    101 |     4 | 2011-01-27 |
|    202 |    106 |     4 | NULL       |
|    203 |    103 |     2 | 2011-01-20 |
|    203 |    108 |     4 | 2011-01-12 |
|    203 |    108 |     2 | 2011-01-30 |
|    204 |    101 |     3 | 2011-01-09 |
|    205 |    103 |     3 | 2011-01-27 |
|    205 |    104 |     2 | 2011-01-22 |
|    205 |    108 |     4 | NULL       |
|    206 |    107 |     3 | 2011-01-15 |
|    206 |    106 |     5 | 2011-01-19 |
|    207 |    107 |     5 | 2011-01-20 |
|    208 |    104 |     3 | 2011-01-02 |
+--------+--------+-------+------------+
14 rows in set (0.00 sec)

===================================================================================================================


1. Find the titles of all movies directed by Steven Spielberg.
=>mysql> select title from movie where director='Steven Spielberg';
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2 rows in set (0.00 sec)


2. Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order.
=>mysql> select year from movie join rating on mid=mid_fk where stars>3 order by year;
+------+
| year |
+------+
| 1937 |
| 1937 |
| 1939 |
| 1981 |
| 1981 |
| 2009 |
+------+
6 rows in set (0.00 sec)


3. Find the titles of all movies that have no ratings
mysql> select title from movie join rating on mid=mid_fk where stars<1;
Empty set (0.00 sec)

4. Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date
=>mysql> select name from reviewer join rating on reviewer.rid=rating.rid_fk where rating is NULL;
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
2 rows in set (0.00 sec)

5. Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars.
//by reviewer name
=>mysql> select re.name,m.title,r.stars,r.ratingdate from movie m join rating r on r.mid_fk=m.mid join reviewer re on re.rid=r.rid_fk order by re.name;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingdate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
14 rows in set (0.03 sec)

//by title
=>mysql> select re.name,m.title,r.stars,r.ratingdate from movie m join rating r on r.mid_fk=m.mid join reviewer re on re.rid=r.rid_fk order by m.title;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingdate |
+------------------+-------------------------+-------+------------+
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
14 rows in set (0.04 sec)

//by stars
mysql> select re.name,m.title,r.stars,r.ratingdate from movie m join rating r on r.mid_fk=m.mid join reviewer re on re.rid=r.rid_fk order by stars;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingdate |
+------------------+-------------------------+-------+------------+
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
+------------------+-------------------------+-------+------------+
14 rows in set (0.02 sec)

6. For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. 

7. For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title.
=>mysql> select m.title,max(r.stars) from movie m join rating r on m.mid=r.mid_fk group by m.title order by m.title;
+-------------------------+--------------+
| title                   | max(r.stars) |
+-------------------------+--------------+
| Avatar                  |            5 |
| E.T.                    |            3 |
| Gone with the Wind      |            4 |
| Raiders of the Lost Ark |            4 |
| Snow White              |            5 |
| The Sound of Music      |            3 |
+-------------------------+--------------+
6 rows in set (0.07 sec)

8. For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title.
=>mysql> select m.title,(max(r.stars)-min(stars)) as Spread from movie m join rating r on m.mid=r.mid_fk group by m.title order by spread desc,m.title;
+-------------------------+--------+
| title                   | Spread |
+-------------------------+--------+
| Avatar                  |      2 |
| Gone with the Wind      |      2 |
| Raiders of the Lost Ark |      2 |
| E.T.                    |      1 |
| Snow White              |      1 |
| The Sound of Music      |      1 |
+-------------------------+--------+
6 rows in set (0.03 sec)

9. Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980.
=>create view After AS (select AVG(stars) as avg2 from Movie m join Rating r on m.mid=r.mid_fk  where year > 1980 group by r.mid_fk);
Query OK, 0 rows affected (0.07 sec)

mysql> create view Before1 AS (select AVG(stars) as avg1 from Movie m join Rating r
    -> on m.mid=r.mid_fk  where year < 1980 group by r.mId);
Query OK, 0 rows affected (0.07 sec)

mysql> create view result as (select avg(avg1)-avg(avg2) from before1,after);
Query OK, 0 rows affected (0.08 sec)

mysql> select * from result;
+---------------------+
| avg(avg1)-avg(avg2) |
+---------------------+
|          0.05556667 |
+---------------------+
1 row in set (0.00 sec)

10. Find the names of all reviewers who rated Gone with the Wind
=>mysql> select distinct re.name from reviewer re join rating r on re.rid=r.rid_fk join movie m on m.mid=r.mid_fk where m.title='Gone with the Wind';
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+
2 rows in set (0.22 sec)


11. For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars
=>mysql> select m.title,re.name,stars from movie m join reviewer re on m.director=re.name join rating on re.rid=rating.rid_fk ;
+---------+---------------+-------+
| title   | name          | stars |
+---------+---------------+-------+
| Titanic | James Cameron |     5 |
| Avatar  | James Cameron |     5 |
+---------+---------------+-------+
2 rows in set (0.00 sec)

12. Return all reviewer names and movie names together in a single list, alphabetized.
xxxx=>select re.name,m.title from movie m join rating r on m.mid=r.rid join reviewer re on re.rid=r.rid order by re.name,m.title;

13. Find the titles of all movies not reviewed by Chris Jackson. 
=> mysql> select title from Movie  where mid not in (select r.mid from reviewer r1
    ->  join rating r on r1.rid=r.rID where r1.name='Chris Jackson');
+--------------------+
| title              |
+--------------------+
| Gone with the Wind |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+
5 rows in set (0.00 sec)

14. For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order.
=>mysql> select distinct re1.name,re2.name from rating r1 join rating r2 on r1.mid_fk=r2.mid_fk join reviewer re1 on r1.rid_fk=re1.rid join reviewer re2 on r2.rid_fk=re2.rid where r1.rid_fk<r2.rid_fk;
+------------------+------------------+
| name             | name             |
+------------------+------------------+
| Sarah Martinez   | Mike Anderson    |
| Brittany Harris  | Chris Jackson    |
| Daniel Lewis     | Elizabeth Thomas |
| Elizabeth Thomas | James Cameron    |
| Chris Jackson    | Ashley White     |
+------------------+------------------+
5 rows in set (0.00 sec)


15. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.
=>mysql> select m.title,re.name,stars from movie m join rating r on m.mid=r.mid_fk join reviewer re on re.rid=r.rid_fk where stars=(select min(stars) from rating);
+-------------------------+-----------------+-------+
| title                   | name            | stars |
+-------------------------+-----------------+-------+
| Gone with the Wind      | Sarah Martinez  |     2 |
| The Sound of Music      | Brittany Harris |     2 |
| Raiders of the Lost Ark | Brittany Harris |     2 |
| E.T.                    | Chris Jackson   |     2 |
+-------------------------+-----------------+-------+
4 rows in set (0.00 sec)


16.List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order.
=>mysql> select m.title,avg(stars) as average from movie m join rating r on m.mid=r.rid_fk group by m.title;

17. Find the names of all reviewers who have contributed three or more ratings.
=>mysql> select re.name from reviewer re join rating r on re.rid=r.rid_fk group by r.rid_fk having count(r.mid_fk)>2 ;
+-----------------+
| name            |
+-----------------+
| Brittany Harris |
| Chris Jackson   |
+-----------------+
2 rows in set (0.02 sec)

18. Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.
=>mysql> select m1.title,m2.director from movie m1 join movie m2 on m1.director=m2
    -> .director group by m1.mid having count(*)>1 order by director,title;
+-------------------------+------------------+
| title                   | director         |
+-------------------------+------------------+
| Avatar                  | James Cameron    |
| Titanic                 | James Cameron    |
| E.T.                    | Steven Spielberg |
| Raiders of the Lost Ark | Steven Spielberg |
+-------------------------+------------------+
4 rows in set (0.00 sec)

19. 
=>mysql> select title,avg(stars) as avg_star from movie join rating on movie.mid=rating.mid_fk group by mid order by avg_star desc limit 1;
+------------+----------+
| title      | avg_star |
+------------+----------+
| Snow White |   4.5000 |
+------------+----------+
1 row in set (0.00 sec)
